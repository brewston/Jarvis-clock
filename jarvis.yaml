substitutions:
  name: esphome-web-0bac48
  friendly_name: "Xiaozhi Ball V2"

  external_media_player: your_media_player  ##change this to your external media player enity_id: do not include media_player.
  home_assistant_host: http://192.168.0.7:8123 ##change to the full url or IP of your HA server including port
  tts_voice_speed: "24000" #options #nabu casa "24000" #piper "16000" elevenlabs "44100" must include quotes
  imagemodel: "Jarvis"
  imagewidth: "240" # GC9A01A (Ball v2 & Muma & Puck) "240"
  imageheight: "240" # GC9A01A (Ball v2 & Muma & Puck) "240"

  loading_illustration_file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/images/${imagemodel}/${imagewidth}x${imageheight}/loading.png
  idle_illustration_file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/images/${imagemodel}/${imagewidth}x${imageheight}/idle.png
  listening_illustration_file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/images/${imagemodel}/${imagewidth}x${imageheight}/listening.png
  thinking_illustration_file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/images/${imagemodel}/${imagewidth}x${imageheight}/thinking.png
  replying_illustration_file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/images/${imagemodel}/${imagewidth}x${imageheight}/replying.png
  error_illustration_file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/images/${imagemodel}/${imagewidth}x${imageheight}/error.png
  timer_finished_illustration_file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/images/${imagemodel}/${imagewidth}x${imageheight}/timer_finished.png
  mute_illustration_file: https://github.com/RealDeco/xiaozhi-esphome/raw/main/images/Mute/${imagewidth}x${imageheight}/mute.png

  loading_illustration_background_color: "000000"
  idle_illustration_background_color: "000000"
  listening_illustration_background_color: "FFFFFF"
  thinking_illustration_background_color: "FFFFFF"
  replying_illustration_background_color: "FFFFFF"
  error_illustration_background_color: "000000"

  voice_assist_idle_phase_id: "1"
  voice_assist_listening_phase_id: "2"
  voice_assist_thinking_phase_id: "3"
  voice_assist_replying_phase_id: "4"
  voice_assist_not_ready_phase_id: "10"
  voice_assist_error_phase_id: "11"
  voice_assist_muted_phase_id: "12"
  voice_assist_timer_finished_phase_id: "20"
  voice_assist_timer_finishing_phase_id: "30"

#####  Days and months #####
## Change the values on the right to match your locale ##
  monday: Monday
  tuesday: Tuesday
  wednesday: Wednesday
  thursday: Thursday
  friday: Friday
  saturday: Saturday
  sunday: Sunday

  jan: January
  feb: February
  mar: March
  apr: April
  may: May
  jun: June
  jul: July
  aug: August
  sept: September
  oct: October
  nov: November
  dec: December
#####################################################################

##### DO NOT CHANGE SUBSTITUTIONS BELOW THIS LINE ######
#####      UNLESS YOU KNOW WHAT YOU ARE DOING     ######
  font_glyphs: '&@!"''%()+=,-_.:°/$€£¥?0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyzÀàÁáÂâÃãÄäĀāĂăÅåǺǻẠạĄąÆæǼǽĆćĈĉČčĊċÇçĎďĐđÐðÈèÉéÊêẼẽĚěËëĒēĔĕĖėẸẹĘęĜĝǦǧĞğĠġĢģĤĥĦħıÌìÍíÎîĨĩÏïĪīĬĭİỊịĮįȷĴĵĶķĸĹĺĽľĻļŁłĿŀŃńÑñŇňŅņƝɲŊŋŉÒòÓóÔôÕõÖöŌōŎŏŐőỌọǪǫØøǾǿŒœŔŕŘřŖŗŚśŜŝŠšŞşȘșẞßŤťŢţȚțŦŧÞþÙùÚúÛûŨũÜüŪūŬŭŮůŰűỤụŲųẀẁẂẃŴŵẄẅỲỳÝýŶŷỸỹŸÿȲȳŹźŽžŻżĲĳƏə'
  # These unique characters have been extracted from every test file of every language available on https://github.com/home-assistant/intents (14 March 2024)
  # However, the Figtree font only contains Latin characters, so there is no point using this... unlessyou change the font configuration accordingly.
  allowed_characters: " !#%'()+,-./0123456789:;<>?@ABCDEFGHIJKLMNOPQRSTUVWYZ[]_abcdefghijklmnopqrstuvwxyz{|}°²³µ¿ÁÂÄÅÉÖÚßàáâãäåæçèéêëìíîðñòóôõöøùúûüýþāăąćčďĐđēėęěğĮįıļľŁłńňőřśšťũūůűųźŻżŽžơưșțΆΈΌΐΑΒΓΔΕΖΗΘΚΜΝΠΡΣΤΥΦάέήίαβγδεζηθικλμνξοπρςστυφχψωϊόύώАБВГДЕЖЗИКЛМНОПРСТУХЦЧШЪЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюяёђєіїјљњћאבגדהוזחטיכלםמןנסעפץצקרשת،ءآأإئابةتجحخدذرزسشصضطظعغفقكلمنهوىيٹپچڈکگںھہیےংকচতধনফবযরলশষস়ািু্చయలిెొ్ംഅആഇഈഉഎഓകഗങചജഞടഡണതദധനപഫബഭമയരറലളവശസഹാിീുൂെേൈ്ൺൻർൽൾაბგდევზთილმნოპრსტუფქყშჩცძჭხạảấầẩậắặẹẽếềểệỉịọỏốồổỗộớờởợụủứừửữựỳ—、一上不个中为主乾了些亮人任低佔何作供依侧係個側偵充光入全关冇冷几切到制前動區卧厅厨及口另右吊后吗启吸呀咗哪唔問啟嗎嘅嘛器圍在场執場外多大始安定客室家密寵对將小少左已帘常幫幾库度庫廊廚廳开式後恆感態成我戲戶户房所扇手打执把拔换掉控插摄整斯新明是景暗更最會有未本模機檯櫃欄次正氏水沒没洗活派温測源溫漏潮激濕灯為無煙照熱燈燥物狀玄现現瓦用發的盞目着睡私空窗立笛管節簾籬紅線红罐置聚聲脚腦腳臥色节著行衣解設調請謝警设调走路車车运連遊運過道邊部都量鎖锁門閂閉開關门闭除隱離電震霧面音頂題顏颜風风食餅餵가간감갔강개거게겨결경고공과관그금급기길깥꺼껐꼽나난내네놀누는능니다닫담대더데도동됐되된됨둡드든등디때떤뜨라래러렇렌려로료른를리림링마많명몇모무문물뭐바밝방배변보부불블빨뽑사산상색서설성세센션소쇼수스습시신실싱아안않알았애야어얼업없었에여연열옆오온완외왼요운움워원위으은을음의이인일임입있작잠장재전절정제져조족종주줄중줘지직진짐쪽차창천최추출충치침커컴켜켰쿠크키탁탄태탬터텔통트튼티파팬퍼폰표퓨플핑한함해했행혀현화활후휴힘，？"

  # Add support for non-unicode characters by using better glyphset
  font_glyphsets: "GF_Latin_Core"
  # for Greek use "Noto Sans" for other languages use a compatible font family
  font_family: Figtree

############# END OF SUBSTITUTIONS #################
####################################################

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2025.6.0
  on_boot:
    priority: 600
    then:
      - script.execute: draw_display
      - component.update: battery_percentage
      - delay: 30s
      - if:
          condition:
            lambda: return id(init_in_progress);
          then:
            - lambda: id(init_in_progress) = false;
            - script.execute: draw_display

  project:
    name: "The.Ball"
    version: "2025.06.00"
esp32:
  board: esp32s3box
  flash_size: 16MB
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"

psram:
  mode: octal
  speed: 80MHz

api:
  on_client_connected:
    - script.execute: draw_display
  on_client_disconnected:
    - script.execute: draw_display

ota:
  - platform: esphome
    id: ota_esphome

logger:
  hardware_uart: USB_SERIAL_JTAG
  level: verbose
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:
    ssid: "The Ball Hotspot"
    password: "ball1234"
  on_connect:
    - script.execute: draw_display
  on_disconnect:
    - script.execute: draw_display

time:
  - platform: sntp
    id: time_comp
    servers:
     - ntp0.ntp-servers.net
     - ntp1.ntp-servers.net
     - ntp2.ntp-servers.net
    on_time_sync:
      - script.execute: time_update
    on_time:
      - minutes: '*'
        seconds: 0
        then:
          - script.execute: time_update

button:
  - platform: restart
    id: reboot
    name: reboot

sensor:
  - platform: adc
    pin: GPIO1
    name: "Battery Voltage"
    id: battery_voltage
    attenuation: 12db
    accuracy_decimals: 2
    update_interval: 1s
    unit_of_measurement: "V"
    icon: mdi:battery-medium
    filters:
      - multiply: 2.0
      - median:
          window_size: 7
          send_every: 7
          send_first_at: 7
      - throttle: 1min
    on_value:
      then:
        - component.update: battery_percentage
  - platform: template
    id: battery_percentage
    name: "Battery Percentage"
    lambda: return id(battery_voltage).state;
    accuracy_decimals: 0
    unit_of_measurement: "%"
    icon: mdi:battery-medium
    filters:
      - calibrate_linear:
         method: exact
         datapoints:
          - 2.80 -> 0.0
          - 3.10 -> 10.0
          - 3.30 -> 20.0
          - 3.45 -> 30.0
          - 3.60 -> 40.0
          - 3.70 -> 50.0
          - 3.75 -> 60.0
          - 3.80 -> 70.0
          - 3.90 -> 80.0
          - 4.00 -> 90.0
          - 4.20 -> 100.0
      - lambda: |-
          if (x > 100) return 100;
          if (x < 0) return 0;
          return x;
    on_value:
      then:
        - lambda: |-
            int current = (int)x;
            if (current != id(last_battery_percent)) {
              id(last_battery_percent) = current;
              id(draw_display).execute();
            }

binary_sensor:
  - platform: gpio
    pin:
      number: 0
      mode: INPUT_PULLUP
      inverted: true
    id: left_button
    internal: true
    on_click:
      if:
        condition:
          switch.is_on: timer_ringing
        then:
          switch.turn_off: timer_ringing
        else:
          button.press: reboot

output:
  - platform: ledc
    pin: GPIO42
    id: backlight_output
    inverted: true

light:
  - platform: monochromatic
    id: Sled
    name: Screen
    icon: "mdi:television"
    entity_category: config
    output: backlight_output
    restore_mode: ALWAYS_ON
    default_transition_length: 250ms

  - platform: esp32_rmt_led_strip
    id: led
    name: Light
    disabled_by_default: false
    restore_mode: ALWAYS_ON
    entity_category: config
    pin: GPIO48
    default_transition_length: 0s
    chipset: WS2812
    num_leds: 1
    rgb_order: grb
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 250ms
          update_interval: 250ms
          min_brightness: 50%
          max_brightness: 100%
      - pulse:
          name: "Fast Pulse"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: 50%
          max_brightness: 100%

touchscreen:
  platform: cst816
  id: screen_touch
  interrupt_pin: GPIO12
  reset_pin: GPIO6
  i2c_id: bus_b

i2c:
  - sda: GPIO15
    scl: GPIO14
    scan: true
    id: bus_a

  - sda: GPIO11
    scl: GPIO07
    scan: true
    id: bus_b

i2s_audio:
  - id: i2s_audio_bus
    i2s_lrclk_pin: GPIO45
    i2s_bclk_pin: GPIO9
    i2s_mclk_pin: GPIO16

audio_dac:
  - platform: es8311
    i2c_id: bus_a
    id: es8311_dac
    bits_per_sample: 16bit
    sample_rate: 16000

microphone:
  - platform: i2s_audio
    id: box_mic
    sample_rate: 16000
    i2s_din_pin: GPIO10
    bits_per_sample: 16bit
    adc_type: external
    channel: left

speaker:
  - platform: i2s_audio
    id: box_speaker
    i2s_dout_pin: GPIO8
    dac_type: external
    sample_rate: 48000
    bits_per_sample: 16bit
    channel: left
    audio_dac: es8311_dac
    buffer_duration: 100ms

media_player:
  - platform: speaker
    name: None
    id: speaker_media_player
    volume_min: 0.5
    volume_max: 0.8
    announcement_pipeline:
      speaker: box_speaker
      format: FLAC
      sample_rate: 48000
      num_channels: 1  # S3 Box only has one output channel
    files:
      - id: timer_finished_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/timer_finished.flac
      - id: wake_word_triggered_sound
        #file: https://www.myinstants.com/media/sounds/sound-1_cBqZb05.mp3
        file: https://www.myinstants.com/media/sounds/sound-3_ARju4wR.mp3
    on_announcement:
      # Stop the wake word (mWW or VA) if the mic is capturing
      - if:
          condition:
            - microphone.is_capturing:
          then:
            - script.execute: stop_wake_word
            # Ensure VA stops before moving on
            - if:
                condition:
                  - lambda: return id(wake_word_engine_location).state == "In Home Assistant";
                then:
                  - wait_until:
                      - not:
                          voice_assistant.is_running:
      # Since VA isn't running, this is user-intiated media playback. Draw the mute display
      - if:
          condition:
            not:
              voice_assistant.is_running:
          then:
            - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
            - script.execute: draw_display
    on_idle:
      # Since VA isn't running, this is the end of user-intiated media playback. Restart the wake word.
      - if:
          condition:
            not:
              voice_assistant.is_running:
          then:
            - script.execute: start_wake_word
            - script.execute: set_idle_or_mute_phase
            - script.execute: draw_display

micro_wake_word:
  id: mww
  models:
    - okay_nabu

    - hey_jarvis

  on_wake_word_detected:
    - if:
        condition:
          switch.is_on: wake_sound
        then:
          - script.execute:
              id: play_sound
              priority: true
              sound_file: !lambda return id(wake_word_triggered_sound);
          - delay: 300ms
    - voice_assistant.start:
        wake_word: !lambda return wake_word;

voice_assistant:
  id: va
  microphone: box_mic
  media_player: speaker_media_player
  micro_wake_word: mww
  noise_suppression_level: 2
  auto_gain: 31dBFS
  volume_multiplier: 2.0
  on_listening:
    - lambda: id(voice_assistant_phase) = ${voice_assist_listening_phase_id};
    # - text_sensor.template.publish:
        # id: text_request
        # state: "..."
    - text_sensor.template.publish:
        id: text_response
        state: "..."
    - script.execute: draw_display
  on_stt_vad_end:
    - lambda: id(voice_assistant_phase) = ${voice_assist_thinking_phase_id};
    - script.execute: draw_display
  # on_stt_end:
    # - text_sensor.template.publish:
        # id: text_request
        # state: !lambda return x;
    # - script.execute: draw_display
  on_tts_start:
    - text_sensor.template.publish:
        id: text_response
        state: !lambda return x;
    - lambda: id(voice_assistant_phase) = ${voice_assist_replying_phase_id};
    - script.execute: draw_display
  on_end:
    # Wait a short amount of time to see if an announcement starts
    - wait_until:
        condition:
          - media_player.is_announcing:
        timeout: 0.5s
    # Announcement is finished and the I2S bus is free
    - wait_until:
        - and:
            - not:
                media_player.is_announcing:
            - not:
                speaker.is_playing:
    # Restart only mWW if enabled; streaming wake words automatically restart
    - if:
        condition:
          - lambda: return id(wake_word_engine_location).state == "On device";
        then:
          - lambda: id(va).set_use_wake_word(false);
          - micro_wake_word.start:
    - script.execute: set_idle_or_mute_phase
    - script.execute: draw_display
    # Clear text sensors
    # - text_sensor.template.publish:
        # id: text_request
        # state: ""
    - text_sensor.template.publish:
        id: text_response
        state: ""
  on_error:
    - if:
        condition:
          lambda: return !id(init_in_progress);
        then:
          - lambda: id(voice_assistant_phase) = ${voice_assist_error_phase_id};
          - script.execute: draw_display
          - delay: 1s
          - if:
              condition:
                switch.is_off: mute
              then:
                - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
              else:
                - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
          - script.execute: draw_display
  on_client_connected:
    - lambda: id(init_in_progress) = false;
    - script.execute: start_wake_word
    - script.execute: set_idle_or_mute_phase
    - script.execute: draw_display
  on_client_disconnected:
    - script.execute: stop_wake_word
    - lambda: id(voice_assistant_phase) = ${voice_assist_not_ready_phase_id};
    - script.execute: draw_display
  on_timer_started:
    - script.execute: draw_display
  on_timer_cancelled:
    - script.execute: draw_display
  on_timer_updated:
    - script.execute: draw_display
  on_timer_tick:
    - script.execute: draw_display
  on_timer_finished:
    - switch.turn_on: timer_ringing
    - wait_until:
        media_player.is_announcing:
    - lambda: id(voice_assistant_phase) = ${voice_assist_timer_finished_phase_id};
    - script.execute: draw_display

script:
  - id: draw_display
    then:
      - if:
          condition:
            lambda: 'return !id(init_in_progress);'
          then:
            - if:
                condition:
                  wifi.connected:
                then:
                  - if:
                      condition:
                        api.connected:
                      then:
                        - if:
                            condition:
                              lambda: 'return id(voice_assistant_phase) == ${voice_assist_listening_phase_id};'
                            then:
                              - lvgl.page.show: listening_page
                            else:
                              - if:
                                  condition:
                                    lambda: 'return id(voice_assistant_phase) == ${voice_assist_thinking_phase_id};'
                                  then:
                                    - lvgl.page.show: thinking_page
                                  else:
                                    - if:
                                        condition:
                                          lambda: 'return id(voice_assistant_phase) == ${voice_assist_replying_phase_id};'
                                        then:
                                          - lvgl.page.show: replying_page
                                        else:
                                          - if:
                                              condition:
                                                lambda: 'return id(voice_assistant_phase) == ${voice_assist_error_phase_id};'
                                              then:
                                                - lvgl.page.show: error_page
                                              else:
                                                - if:
                                                    condition:
                                                      lambda: 'return id(voice_assistant_phase) == ${voice_assist_muted_phase_id};'
                                                    then:
                                                      - lvgl.page.show: muted_page
                                                    else:
                                                      - if:
                                                          condition:
                                                            lambda: 'return id(voice_assistant_phase) == ${voice_assist_not_ready_phase_id};'
                                                          then:
                                                            - lvgl.page.show: no_ha_page
                                                          else:
                                                            - if:
                                                                condition:
                                                                  lambda: 'return id(voice_assistant_phase) == ${voice_assist_timer_finished_phase_id};'
                                                                then:
                                                                  - lvgl.page.show: timer_finished_page
                                                                else:
                                                                  - lvgl.page.show: idle_page

  - id: fetch_first_active_timer
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          auto output_timer = timers.begin()->second;
          for (auto &iterable_timer : timers) {
            if (iterable_timer.second.is_active && iterable_timer.second.seconds_left <= output_timer.seconds_left) {
              output_timer = iterable_timer.second;
            }
          }
          id(global_first_active_timer) = output_timer;
  - id: check_if_timers_active
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          bool output = false;
          if (timers.size() > 0) {
            for (auto &iterable_timer : timers) {
              if(iterable_timer.second.is_active) {
                output = true;
              }
            }
          }
          id(global_is_timer_active) = output;
  - id: fetch_first_timer
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          auto output_timer = timers.begin()->second;
          for (auto &iterable_timer : timers) {
            if (iterable_timer.second.seconds_left <= output_timer.seconds_left) {
              output_timer = iterable_timer.second;
            }
          }
          id(global_first_timer) = output_timer;
  - id: check_if_timers
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          bool output = false;
          if (timers.size() > 0) {
            output = true;
          }
          id(global_is_timer) = output;
  - id: play_sound
    parameters:
      priority: bool
      sound_file: "audio::AudioFile*"
    then:
      - lambda: |-
          if (priority) {
            id(speaker_media_player)
              ->make_call()
              .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_STOP)
              .set_announcement(true)
              .perform();
          }
          if ( (id(speaker_media_player).state != media_player::MediaPlayerState::MEDIA_PLAYER_STATE_ANNOUNCING ) || priority) {
            id(speaker_media_player)
              ->play_file(sound_file, true, false);
          }
  # - id: draw_timer_timeline
    # then:
      # - lambda: |
          # id(check_if_timers_active).execute();
          # id(check_if_timers).execute();
          # if (id(global_is_timer_active)){
            # id(fetch_first_active_timer).execute();
            # int active_pixels = round( 320 * id(global_first_active_timer).seconds_left / max(id(global_first_active_timer).total_seconds , static_cast<uint32_t>(1)) );
            # if (active_pixels > 0){
              # id(ball_lcd).filled_rectangle(0 , 225 , 240 , 15 , Color::WHITE );
              # id(ball_lcd).filled_rectangle(0 , 226 , active_pixels , 13 , id(active_timer_color) );
            # }
          # } else if (id(global_is_timer)){
            # id(fetch_first_timer).execute();
            # int active_pixels = round( 320 * id(global_first_timer).seconds_left / max(id(global_first_timer).total_seconds , static_cast<uint32_t>(1)));
            # if (active_pixels > 0){
              # id(ball_lcd).filled_rectangle(0 , 225 , 240 , 15 , Color::WHITE );
              # id(ball_lcd).filled_rectangle(0 , 226 , active_pixels , 13 , id(paused_timer_color) );
            # }
          # }
  # - id: draw_active_timer_widget
    # then:
      # - lambda: |
          # id(check_if_timers_active).execute();
          # if (id(global_is_timer_active)){
            # id(ball_lcd).filled_rectangle(80 , 40 , 160 , 50 , Color::WHITE );
            # id(ball_lcd).rectangle(80 , 40 , 160 , 50 , Color::BLACK );

            # id(fetch_first_active_timer).execute();
            # int hours_left = floor(id(global_first_active_timer).seconds_left / 3600);
            # int minutes_left = floor((id(global_first_active_timer).seconds_left - hours_left * 3600) / 60);
            # int seconds_left = id(global_first_active_timer).seconds_left - hours_left * 3600 - minutes_left * 60 ;
            # auto display_hours = (hours_left < 10 ? "0" : "") + std::to_string(hours_left);
            # auto display_minute = (minutes_left < 10 ? "0" : "") + std::to_string(minutes_left);
            # auto display_seconds = (seconds_left  < 10 ? "0" : "") + std::to_string(seconds_left) ;

            # std::string display_string = "";
            # if (hours_left > 0) {
              # display_string = display_hours + ":" + display_minute;
            # } else {
              # display_string = display_minute + ":" + display_seconds;
            # }
            # id(ball_lcd).printf(120, 47, id(font_timer), Color::BLACK, "%s", display_string.c_str());
          # }
  # # Starts either mWW or the streaming wake word, depending on the configured location
  - id: start_wake_word
    then:
      - if:
          condition:
            and:
              - not:
                  - voice_assistant.is_running:
              - lambda: return id(wake_word_engine_location).state == "On device";
          then:
            - lambda: id(va).set_use_wake_word(false);
            - micro_wake_word.start:
      - if:
          condition:
            and:
              - not:
                  - voice_assistant.is_running:
              - lambda: return id(wake_word_engine_location).state == "In Home Assistant";
          then:
            - lambda: id(va).set_use_wake_word(true);
            - voice_assistant.start_continuous:
  # Stops either mWW or the streaming wake word, depending on the configured location
  - id: stop_wake_word
    then:
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "In Home Assistant";
          then:
            - lambda: id(va).set_use_wake_word(false);
            - voice_assistant.stop:
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "On device";
          then:
            - micro_wake_word.stop:
  # Set the voice assistant phase to idle or muted, depending on if the software mute switch is activated
  - id: set_idle_or_mute_phase
    then:
      - if:
          condition:
            switch.is_off: mute
          then:
            - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
          else:
            - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
  - id: time_update
    then:
      - lvgl.indicator.update:
          id: minute_hand
          value: !lambda |-
            return id(time_comp).now().minute;
      - lvgl.indicator.update:
          id: hour_hand
          value: !lambda |-
            auto now = id(time_comp).now();
            return std::fmod(now.hour, 12) * 60 + now.minute;
      - lvgl.label.update:
          id: date_label
          text: !lambda |-
            static const char * const mon_names[] = {"JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC"};
            static char date_buf[8];
            auto now = id(time_comp).now();
            snprintf(date_buf, sizeof(date_buf), "%s %2d", mon_names[now.month-1], now.day_of_month);
            return date_buf;
      #- lvgl.label.update:
      #    id: day_label
      #    text: !lambda |-
      #      static const char * const day_names[] = {"SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT"};
      #      return day_names[id(time_comp).now().day_of_week - 1];
      - lvgl.label.update:
          id: title_label
          text: !lambda |-
            return "J.A.R.V.I.S";
      - lvgl.label.update:
          id: display_time_blank
          text: !lambda |-
            static char time_buf[16];
            auto now = id(time_comp).now();
            snprintf(time_buf, sizeof(time_buf), "%02d:%02d", now.hour, now.minute);
            return time_buf;


switch:
  - platform: template
    id: wake_sound
    name: Wake sound
    icon: "mdi:bullhorn"
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON

  - platform: template
    name: Mute
    id: mute
    icon: "mdi:microphone-off"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
    on_turn_off:
      - microphone.unmute:
      - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
      - script.execute: draw_display
    on_turn_on:
      - microphone.mute:
      - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
      - script.execute: draw_display
  - platform: template
    id: timer_ringing
    optimistic: true
    internal: true
    restore_mode: ALWAYS_OFF
    on_turn_off:
      # Turn off the repeat mode and disable the pause between playlist items
      - lambda: |-
              id(speaker_media_player)
                ->make_call()
                .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_OFF)
                .set_announcement(true)
                .perform();
              id(speaker_media_player)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 0);
      # Stop playing the alarm
      - media_player.stop:
          announcement: true
      - light.turn_off: led
    on_turn_on:
      # Turn on the repeat mode and pause for 1000 ms between playlist items/repeats
      - light.turn_on:
          id: led
          red: 100%
          green: 0%
          blue: 0%
          brightness: 100%
          effect: fast pulse
      - lambda: |-
            id(speaker_media_player)
              ->make_call()
              .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_ONE)
              .set_announcement(true)
              .perform();
            id(speaker_media_player)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 1000);
      - media_player.speaker.play_on_device_media_file:
          media_file: timer_finished_sound
          announcement: true
      - delay: 15min
      - switch.turn_off: timer_ringing

  - platform: gpio
    id: speaker_enable
    pin: GPIO46
    restore_mode: ALWAYS_ON

  - platform: template
    id: clock_type
    name: Digital / Analogue
    restore_mode: ALWAYS_ON
    entity_category: config
    icon: "mdi:clock"
    on_turn_off:
      - lvgl.widget.hide: analogue_clock
      - lvgl.widget.show: digital_clock
      - lvgl.label.update:
          id: display_time_blank
          text: !lambda |-
            static char time_buf[16];
            auto now = id(time_comp).now();
            snprintf(time_buf, sizeof(time_buf), "%02d:%02d", now.hour, now.minute);
            return time_buf;
    on_turn_on:
      - lvgl.widget.show: analogue_clock
      - lvgl.widget.hide: digital_clock
    optimistic: true

select:
  - platform: template
    entity_category: config
    name: Wake word engine location
    id: wake_word_engine_location
    icon: "mdi:account-voice"
    optimistic: true
    restore_value: true
    options:
      - In Home Assistant
      - On device
    initial_option: On device
    on_value:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - wait_until:
                lambda: return id(voice_assistant_phase) == ${voice_assist_muted_phase_id} || id(voice_assistant_phase) == ${voice_assist_idle_phase_id};
            - if:
                condition:
                  lambda: return x == "In Home Assistant";
                then:
                  - micro_wake_word.stop
                  - delay: 500ms
                  - if:
                      condition:
                        switch.is_off: mute
                      then:
                        - lambda: id(va).set_use_wake_word(true);
                        - voice_assistant.start_continuous:
            - if:
                condition:
                  lambda: return x == "On device";
                then:
                  - lambda: id(va).set_use_wake_word(false);
                  - voice_assistant.stop
                  - delay: 500ms
                  - if:
                      condition:
                        switch.is_off: mute
                      then:
                        - micro_wake_word.start

globals:
  - id: init_in_progress
    type: bool
    restore_value: false
    initial_value: "true"
  - id: voice_assistant_phase
    type: int
    restore_value: false
    initial_value: ${voice_assist_not_ready_phase_id}
  - id: global_first_active_timer
    type: voice_assistant::Timer
    restore_value: false
  - id: global_is_timer_active
    type: bool
    restore_value: false
  - id: global_first_timer
    type: voice_assistant::Timer
    restore_value: false
  - id: global_is_timer
    type: bool
    restore_value: false
  - id: last_battery_percent
    type: int
    restore_value: no
    initial_value: '-1'

image:
  - file: ${error_illustration_file}
    id: casita_error
    resize: 240x240
    type: RGB565
    transparency: alpha_channel
  - file: ${idle_illustration_file}
    id: casita_idle
    resize: 240x240
    type: RGB565
    transparency: alpha_channel
  - file: ${listening_illustration_file}
    id: casita_listening
    resize: 240x240
    type: RGB565
    transparency: alpha_channel
  - file: ${thinking_illustration_file}
    id: casita_thinking
    resize: 240x240
    type: RGB565
    transparency: alpha_channel
  - file: ${replying_illustration_file}
    id: casita_replying
    resize: 240x240
    type: RGB565
    transparency: alpha_channel
  - file: ${timer_finished_illustration_file}
    id: casita_timer_finished
    resize: 240x240
    type: RGB565
    transparency: alpha_channel
  - file: ${loading_illustration_file}
    id: casita_initializing
    resize: 240x240
    type: RGB565
    transparency: alpha_channel
  - file: https://github.com/esphome/wake-word-voice-assistants/raw/main/error_box_illustrations/error-no-wifi.png
    id: error_no_wifi
    resize: 240x240
    type: RGB565
    transparency: alpha_channel
  - file: https://github.com/esphome/wake-word-voice-assistants/raw/main/error_box_illustrations/error-no-ha.png
    id: error_no_ha
    resize: 240x240
    type: RGB565
    transparency: alpha_channel

font:
  - file:
      type: gfonts
      family: ${font_family}
      weight: 300
      italic: true
    id: font_request
    size: 15
    glyphsets:
      - ${font_glyphsets}
  - file:
      type: gfonts
      family: ${font_family}
      weight: 300
    id: font_response
    size: 15
    glyphsets:
      - ${font_glyphsets}
  - file:
      type: gfonts
      family: ${font_family}
      weight: 300
    id: font_timer
    size: 30
    glyphsets:
      - ${font_glyphsets}

text_sensor:
  - id: text_request
    platform: template
    on_value:
      lambda: |-
        if(id(text_request).state.length()>32) {
          std::string name = id(text_request).state.c_str();
          std::string truncated = esphome::str_truncate(name.c_str(),31);
          id(text_request).state = (truncated+"...").c_str();
        }

  - id: text_response
    platform: template
    on_value:
      lambda: |-
        if(id(text_response).state.length()>32) {
          std::string name = id(text_response).state.c_str();
          std::string truncated = esphome::str_truncate(name.c_str(),31);
          id(text_response).state = (truncated+"...").c_str();
        }

color:
  - id: idle_color
    hex: ${idle_illustration_background_color}
  - id: listening_color
    hex: ${listening_illustration_background_color}
  - id: thinking_color
    hex: ${thinking_illustration_background_color}
  - id: replying_color
    hex: ${replying_illustration_background_color}
  - id: loading_color
    hex: ${loading_illustration_background_color}
  - id: error_color
    hex: ${error_illustration_background_color}
  - id: active_timer_color
    hex: "26ed3a"
  - id: paused_timer_color
    hex: "3b89e3"

spi:
  - id: spi_bus
    clk_pin: 4
    mosi_pin: 2
display:
  - platform: ili9xxx
    id: ball_lcd
    model: GC9A01A
    invert_colors: true
    data_rate: 40MHz
    cs_pin: 5
    dc_pin: 47
    reset_pin:
      number: 38
#      inverted: false
    update_interval: never
    dimensions:
        height: 240
        width: 240
lvgl:
  displays:
    - ball_lcd
  touchscreens:
    - screen_touch
  theme:
    label:
      text_font: font_response
      text_align: CENTER
      text_color: 0xffffff
      align: TOP_MID

    button:
      bg_color: blue
      bg_opa: COVER
      border_color: 0x53334B
      border_width: 4
      text_color: white
      radius: 20
      shadow_color: grey
      shadow_ofs_x: 0
      shadow_ofs_y: 0
      shadow_spread: 3
      shadow_width: 5
      shadow_opa: 70%
      checked:
        bg_color: blue
        bg_opa: COVER
        border_color: black
        border_width: 2
        text_color: yellow
        radius: 20
        shadow_color: yellow
        shadow_ofs_x: 0
        shadow_ofs_y: 0
        shadow_spread: 5
        shadow_width: 5
        shadow_opa: 70%

    switch:
      bg_color: 0xC0C0C0
      bg_grad_color: 0xb0b0b0
      bg_grad_dir: VER
      bg_opa: COVER
      checked:
        bg_color: 0x1d5f96
        bg_grad_color: 0x03324A
        bg_grad_dir: VER
        bg_opa: COVER
      knob:
        bg_color: 0xFFFFFF
        bg_grad_color: 0xC0C0C0
        bg_grad_dir: VER
        bg_opa: COVER
    slider:
      border_width: 1
      border_opa: 15%
      bg_color: 0xcccaca
      bg_opa: 15%
      indicator:
        bg_color: 0x1d5f96
        bg_grad_color: 0x03324A
        bg_grad_dir: VER
        bg_opa: COVER
      knob:
        bg_color: 0x2F8CD8
        bg_grad_color: 0x005782
        bg_grad_dir: VER
        bg_opa: COVER
        border_color: 0x0077b3
        border_width: 1
        text_color: 0xFFFFFF

  style_definitions:
    - id: main_content
      bg_color: white
      text_color: 0xFFFFFF
      width: 100%
      height: 100%
      align: TOP_MID
      border_width: 0
      radius: 0

    - id: bottom_content_full
      bg_color: blue
      text_color: white
      text_align: CENTER
      text_font: font_response
      align: BOTTOM_MID
      width: 100%
      height: 20%
      border_side: TOP
      border_width: 6
      border_color: purple
      radius: 0

  pages:
    - id: idle_page
      widgets:
        - obj:
            id: digital_clock
            styles: main_content
            border_width: 0
            bg_color: black
            text_color: white
            scrollbar_mode: "OFF"
            widgets:
              - image:
                  align: CENTER
                  src: casita_idle
                  id: casita_idle_lvgl
                  scrollable: OFF
                  bg_color: black
                  bg_opa: TRANSP
                  hidden: false
              - label:
                  id: display_time_blank
                  translate_y: 80
                  text_font: montserrat_32
                  text_align: CENTER
                  text_color: cyan

                  bg_opa: 5%
                  text: "J.A.R.V.I.S"

        - obj:
            id: analogue_clock
            height: 240
            width: 240
            align: CENTER
            pad_all: 0
            border_width: 0
            bg_color: black
            widgets:
              - meter: # clock face
                  height: 240
                  width: 240
                  align: CENTER
                  bg_opa: TRANSP
                  border_width: 0
                  text_color: cyan
                  scales:
                    - range_from: 0 # minutes scale
                      range_to: 60
                      angle_range: 360
                      rotation: 270
                      ticks:
                        width: 1
                        count: 61
                        length: 10
                        color: cyan
                      indicators:
                        - line:
                            id: minute_hand
                            width: 4
                            color: blue
                            r_mod: -4
                            value: 0
                    - range_from: 1 # hours scale for labels
                      range_to: 12
                      angle_range: 330
                      rotation: 300
                      ticks:
                        width: 1
                        count: 12
                        length: 1
                        major:
                          stride: 1
                          width: 4
                          length: 10
                          color: blue
                          label_gap: 12
                    - range_from: 0 # hi-res hours scale for hand
                      range_to: 720
                      angle_range: 360
                      rotation: 270
                      ticks:
                        count: 0
                      indicators:
                        - line:
                            id: hour_hand
                            width: 6
                            color: blue
                            r_mod: -30
                            value: 0
              #- label:
              #  id: day_label
              #   y: 55
              - label:
                  id: date_label
                  y: 155
              - label:
                  id: title_label
                  text_color: blue
                  y: 55

    - id: listening_page
      widgets:
        - obj:
            styles: main_content
            border_width: 0
            scrollbar_mode: "OFF"
            # bg_color: black
            text_color: white
            widgets:
               - image:
                  align: CENTER
                  src: casita_listening
                  id: casita_listening_lvgl

    - id: thinking_page
      widgets:
        - obj:
            styles: main_content
            border_width: 0
            scrollbar_mode: "OFF"
            # bg_color: black
            text_color: white
            widgets:
               - image:
                  align: CENTER
                  src: casita_thinking
                  id: casita_thinking_lvgl

    - id: replying_page
      widgets:
        - obj:
            styles: main_content
            border_width: 0
            scrollbar_mode: "OFF"
            # bg_color: black
            text_color: white
            widgets:
               - image:
                  align: CENTER
                  src: casita_replying
                  id: casita_replying_lvgl

    - id: timer_finished_page
      widgets:
        - obj:
            styles: main_content
            border_width: 0
            bg_color: black
            text_color: white
            scrollbar_mode: "OFF"
            widgets:
               - image:
                  align: CENTER
                  src: casita_timer_finished
                  id: timer_finished_lvgl
            on_click:
              switch.turn_off: timer_ringing

    - id: error_page
      widgets:
        - obj:
            styles: main_content
            scrollbar_mode: "OFF"
            border_width: 0
            # bg_color: black
            text_color: white
            widgets:
               - image:
                  align: CENTER
                  src: casita_error
                  id: casita_error_lvgl

    - id: no_ha_page
      widgets:
        - obj:
            styles: main_content
            border_width: 0
            scrollbar_mode: "OFF"
            # bg_color: black
            text_color: white
            widgets:
               - image:
                  align: CENTER
                  src: error_no_ha
                  id: no_ha_lvgl

    - id: no_wifi_page
      widgets:
        - obj:
            styles: main_content
            border_width: 0
            scrollbar_mode: "OFF"
            # bg_color: black
            text_color: white
            widgets:
               - image:
                  align: CENTER
                  src: error_no_wifi
                  id: no_wifi_lvgl

    - id: initializing_page
      widgets:
        - obj:
            styles: main_content
            border_width: 0
            scrollbar_mode: "OFF"
            # bg_color: black
            text_color: white
            widgets:
               - image:
                  align: CENTER
                  src: casita_initializing
                  id: casita_initializing_lvgl

    - id: muted_page
